@page "/dungeon2"
@implements IDisposable
@inject IJSRuntime JsRuntime
@using BlazorBattle.Client.Models

<div class="dungeon-crawler">
    <div class="dungeon-grid-container">
        <div class="dungeon-grid">
            @for (int y = Dungeon.DungeonTiles.Count - 1; y >= 0; y--)
            {
                <div class="dungeon-row" id="@($"row{y}")">
                    @for (int x = 0; x < Dungeon.DungeonWidth; x++)
                    {
                        var tile = Dungeon.DungeonTiles[y][x];
                        <div class="@GetTileClass(tile, x, y)">
                            <div class="@GetTileContentClass(tile, x, y)"></div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="controls" @onkeydown="@MoveKeydown" @ref="_myElementReference" contenteditable="true">
        <button @onclick="() => MoveHorizontal(-1)">Left</button>
        <button @onclick="MoveDown">Down</button>
        <button @onclick="() => MoveHorizontal(1)">Right</button>
    </div>
</div>

@code {
    private Dungeon Dungeon { get; set; } = new(20);
    private ElementReference _myElementReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JsRuntime.InvokeVoidAsync("BlazorUniversity.setFocus", _myElementReference);
    }

    protected override void OnInitialized()
    {
        Dungeon.TreasureFound += OnTreasureFound;
        Dungeon.TrapHit += OnTrapFound;
    }

    private string GetTileClass(Tile tile, int x, int y)
    {
        var classes = new List<string> { "tile" };

        if (!tile.Discovered)
            return "tile hidden";

        if (tile.Visited)
            classes.Add("visited");

        return string.Join(" ", classes);
    }

    private string GetTileContentClass(Tile tile, int x, int y)
    {
        var classes = new List<string> { "tile-content" };

        if (x == Dungeon.PlayerPosition.X && y == Dungeon.PlayerPosition.Y)
            classes.Add("player");
        else
        {
            if (tile.Discovered)
                classes.Add(tile.Type.ToString().ToLower());

        }

        return string.Join(" ", classes); ;
    }

    public async Task MoveKeydown(KeyboardEventArgs e)
    {
        @* if (e.Code == "ArrowUp" || e.Code == "w")
        {
            // ...
        } *@
        if (e.Code == "ArrowDown" || e.Code == "s")
        {
            await MoveDown();
        }
        else if (e.Code == "ArrowLeft" || e.Code == "a")
        {
            MoveHorizontal(-1);
        }
        else if (e.Code == "ArrowRight" || e.Code == "d")
        {
            MoveHorizontal(1);
        }
    }

    private async Task MoveDown()
    {
        Dungeon.MoveDown();
        if(Dungeon.DungeonLength > 5)
        {
            if(Dungeon.PlayerPosition.Y > 5){
                var moveTo = Dungeon.PlayerPosition.Y - 4;
                await JsRuntime.InvokeVoidAsync("onLinkClick", $"row{moveTo}");
            }
        }
    }

    private void MoveHorizontal(int direction)
    {
       Dungeon.MoveHorizontal(direction);
    }

    void OnTreasureFound()
    {
        Console.WriteLine("Event: Treasure has been found!");
    }

    void OnTrapFound()
    {
        Console.WriteLine("Event: Trap has been found! Auch");
    }

    public void Dispose()
    {
        Dungeon.TreasureFound -= OnTreasureFound;
        Dungeon.TrapHit -= OnTrapFound;
    }
}