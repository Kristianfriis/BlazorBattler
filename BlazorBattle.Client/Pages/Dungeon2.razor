@page "/dungeon2"
@implements IDisposable
@inject IJSRuntime JSRuntime
@using BlazorBattle.Client.Models

<div class="dungeon-crawler">
    <div class="dungeon-grid-container">
        <div class="dungeon-grid">
            @for (int y = Dungeon.DungeonTiles.Count - 1; y >= 0; y--)
            {
                <div class="dungeon-row" id="@($"row{y}")">
                    @for (int x = 0; x < Dungeon.DungeonWidth; x++)
                    {
                        var tile = Dungeon.DungeonTiles[y][x];
                        <div class="@GetTileClass(tile, x, y)">
                            <div class="@GetTileContentClass(tile, x, y)"></div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="controls" @onkeydown="@MoveKeydown" @ref="MyElementReference" contenteditable="true">
        <button @onclick="() => MoveHorizontal(-1)">Left</button>
        <button @onclick="MoveDown">Down</button>
        <button @onclick="() => MoveHorizontal(1)">Right</button>
    </div>
</div>

@code {
    private Dungeon Dungeon { get; set; } = new(20);
    private ElementReference MyElementReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("BlazorUniversity.setFocus", MyElementReference);
    }

    protected override void OnInitialized()
    {
        Dungeon.TreasureFound += OnTreasureFound;
        Dungeon.TrapHit += OnTrapFound;
    }

    private string GetTileClass(Tile tile, int x, int y)
    {
        var classes = new List<string> { "tile" };

        if (!tile.Discovered)
            return "tile hidden";

        if (tile.Visited)
            classes.Add("visited");

        return string.Join(" ", classes);
    }

    private string GetTileContentClass(Tile tile, int x, int y)
    {
        var classes = new List<string> { "tile-content" };

        if (x == Dungeon.PlayerPosition.X && y == Dungeon.PlayerPosition.Y)
            classes.Add("player");
        else
        {
            if (tile.Discovered)
                classes.Add(tile.Type.ToString().ToLower());

        }

        return string.Join(" ", classes); ;
    }

    public async Task MoveKeydown(KeyboardEventArgs e)
    {
        @* if (e.Code == "ArrowUp" || e.Code == "w")
        {
            // ...
        } *@
        if (e.Code == "ArrowDown" || e.Code == "s")
        {
            await MoveDown();
        }
        else if (e.Code == "ArrowLeft" || e.Code == "a")
        {
            MoveHorizontal(-1);
        }
        else if (e.Code == "ArrowRight" || e.Code == "d")
        {
            MoveHorizontal(1);
        }
    }

    private async Task MoveDown()
    {
        Dungeon.MoveDown();
        if(Dungeon.DungeonLength > 5)
        {
            if(Dungeon.PlayerPosition.Y > 5){
                var moveTo = Dungeon.PlayerPosition.Y - 4;
                await JSRuntime.InvokeVoidAsync("onLinkClick", $"row{moveTo}");
            }
        }
    }

    private void MoveHorizontal(int direction)
    {
       Dungeon.MoveHorizontal(direction);
    }

    void OnTreasureFound()
    {
        Console.WriteLine("Event: Treasure has been found!");
    }

    void OnTrapFound()
    {
        Console.WriteLine("Event: Trap has been found! Auch");
    }

    public void Dispose()
    {
        Dungeon.TreasureFound -= OnTreasureFound;
        Dungeon.TrapHit -= OnTrapFound;
    }
}

<style>
    .dungeon-crawler {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        height: 70vh;
        /* Use viewport height */
        max-height: 800px;

        /* Variables */
        --tile-size: 100px;
    }

    .dungeon-grid-container {
        max-width: calc((var(--tile-size) * 3px) + 50px)
        /* Adjust based on tile width */
        height: 100%;
        overflow-y: auto;
        scrollbar-width: none;
        scrollbar-color: #3e2723 #6d4c41;
    }

    .dungeon-grid {
        display: flex;
        flex-direction: column-reverse;
        width: 100%;
    }

    .dungeon-row {
        display: flex;
        width: 100%;
    }

    /* Custom Scrollbar for Webkit Browsers */
    .dungeon-grid-container::-webkit-scrollbar {
        width: 10px;
    }

    .dungeon-grid-container::-webkit-scrollbar-track {
        background: #6d4c41;
    }

    .dungeon-grid-container::-webkit-scrollbar-thumb {
        background-color: #3e2723;
        border-radius: 6px;
        border: 3px solid #6d4c41;
    }

    .dungeon-grid-container::-webkit-scrollbar-thumb:hover {
        background-color: #4e342e;
    }

    .tile {
        width: var(--tile-size);
        height: var(--tile-size);
        min-width: var(--tile-size);
        position: relative;
        background-color: #6d4c41;
        /* Base brown color */
        background-image:
            radial-gradient(#5d4037 10%, transparent 10%),
            radial-gradient(#5d4037 10%, transparent 10%);
        background-size: 10px 10px;
        background-position: 0 0, 5px 5px;
    }

    .tile-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 70%;
        height: 70%;
        border-radius: 4px;
    }

    /* Tile Type Styles */
    .tile-content.empty {}

    .tile-content.treasure {
        background-color: gold;
        box-shadow: 0 0 5px rgba(255, 215, 0, 0.7);
    }

    .tile-content.trap {
        background-color: darkred;
        clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
    }

    .tile-content.wall {
        background-color: #4a4a4a;
        background-image:
            radial-gradient(#1a1818 15%, transparent 15%),
            radial-gradient(#1a1818 15%, transparent 15%);
        background-size: 10px 10px;
        background-position: 0 0, 5px 5px;
        width: 100%;
        height: 100%;
    }

    .tile-content.player {
        background-color: blue;
        border-radius: 50%;
    }

    /* Visited and Hidden States */
    .tile.visited {
        opacity: 0.7;
    }

    .tile.hidden {
        background-color: #1a0c08;
    }

    .controls {
        margin-top: 20px;
        display: flex;
        gap: 10px;
    }

    .controls button {
        background-color: #3e2723;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .controls button:hover {
        background-color: #4e342e;
    }
</style>